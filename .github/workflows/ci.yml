name: CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - run: python -m pip install --upgrade pip
      - run: pip install ruff black
      - run: ruff check src/ tests/

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - run: python -m pip install --upgrade pip
      - run: pip install -r requirements.txt -r requirements-dev.txt
      - run: pytest tests/ --cov=src --cov-report=xml --cov-fail-under=80 -v
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  canary:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
      - name: Pull image
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      - name: Start canary container
        run: |
          docker run -d --name app-canary -p 9000:8000 -e CANARY=true \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      - name: Wait for healthy
        run: timeout 60 bash -c 'until curl -sf http://localhost:9000/health; do sleep 2; done'
      - name: Health check
        run: |
          resp=$(curl -s http://localhost:9000/health)
          echo "$resp"
          echo "$resp" | grep -q '"status":"healthy"' || (docker logs app-canary && exit 1)
      - if: always()
        run: docker stop app-canary && docker rm app-canary

  acceptance_tests:
    runs-on: ubuntu-latest
    needs: canary
    steps:
      - uses: actions/checkout@v4
      - name: Run acceptance tests
        env:
          API_URL: http://localhost:9000
        run: |
          # start image again for acceptance
          docker run -d --name app-accept -p 9000:8000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          timeout 60 bash -c 'until curl -sf http://localhost:9000/health; do sleep 2; done'
          chmod +x scripts/acceptance_tests.sh
          API_URL=http://localhost:9000 bash scripts/acceptance_tests.sh
      - if: always()
        run: docker stop app-accept && docker rm app-accept

  security_scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - run: python -m pip install --upgrade pip
      - run: pip install -r requirements.txt pip-audit
      - run: |
          pip-audit --no-deps --exit-zero || exit_code=$?
          # fail only on CRITICAL vulns
          pip-audit --no-deps --format=columns | grep -i CRITICAL && exit 1 || echo "No CRITICAL CVEs"

  deploy_tag:
    runs-on: ubuntu-latest
    needs: [acceptance_tests, security_scan]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: "Release for ${{ github.ref_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
